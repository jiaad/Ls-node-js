#!/usr/bin/env node
const fs = require('fs');
const colors = require('colors');
const util = require('util');
const process = require('process');
const { throws } = require('assert');    
const Utils = require('./Utils')
const ArgvHandler = require('./ArgvHandler');
const childProcess = require('child_process');
// const { argv, exec } = require('process');
// const childProcess = 
// * PROMISIFY callbacks
const readFile = util.promisify(fs.readFile);
const openFile = util.promisify(fs.open)
const fstat = util.promisify(fs.fstat)
const Stats = util.promisify(fs.stat)
const fsAccess = util.promisify(fs.access)
const lstat = util.promisify(fs.lstat)
const exec = util.promisify(childProcess.exec)
const readDir = util.promisify(fs.readdir)

class Main{
  constructor(props) {
    this.utils = new Utils()
    this.argvHandler = new ArgvHandler()
  }

  async  getFileFD (fd, dirent){
    try {
        fd = dirent.name
        return await openFile(fd)
    } catch (e) {
      // console.log('ERROR IN CATCH BLOCK FT_LS : ', e)
      throw 'ERROR IN CATCH BLOCK: NO FILE OR DIRECTORY'
    }

}

  async getAllInfoForls(path='.'){

    let res = []
    let currentDir = process.cwd()
    let directory = path !== '.' ?  `./${path}` : '.'
    let dir = await readDir(directory)

    process.chdir(directory) // gi to the dir ro read inside

    for (const dirent of dir) {
      let stat = await Stats(dirent)
      let type = stat.isFile()
      let objToPush = this.utils.pushStatsToArray(stat,type, dirent)
      res.push(objToPush)
    }
    return res
  }


  async loopShowFilesAndDirectories(stockResult){
    // let i = 0
    for (let i = 0; i < stockResult.length; i++) {
      const element = stockResult[i];
      const elSize = String(element.size)
      let name = element.name
      name = await this.utils.colorizeOutput(element)
      process.stdout.write(name + '           ')
    }
    // console.log(stockResult)
    // if(i === stockResult.length - 1)
      process.stdout.write('\n')
  }



  async  handlePath(){
    // let {files, dirs} = await this.argvHandler.argvDirectories() // get an array of object {files, dirs} // destructuring

    let curr = process.cwd()
    let res = []
    let args = process.argv.slice(2)
    for (let i = 0; i < args.length; i++) {
      let filesAndDirs = await this.getAllInfoForls(args[i])
        await this.loopShowFilesAndDirectories(filesAndDirs)
      process.chdir(curr)
    }
    // console.log(res)
  }

  async noFlagLs(stockRes){
    // let sorted  = stockRes.sort((a, b) => a.name.localeCompare(b.name))
    
    stockRes.forEach(async element => {
      element = await this.utils.colorizeOutput(element)
      process.stdout.write(element + '      ')
    });
  }

  async lsAllFilesAndDirectories(){
    let {files, dirs} = await this.argvHandler.argvDirectories() // get an array of object {files, dirs} // destructuring
    let curr = process.cwd()
    // PRINT FILES BEFORE DIRS
    files.upcaseFiles.map(a => process.stdout.write(a + "         "))
    files.downcaseFiles.map(a => process.stdout.write(a + " "))
    files.upcaseFiles.length >= 1 || files.downcaseFiles.length >= 1 
    ? process.stdout.write("\n\n"): null // Print them

    let len = dirs.length
    for (let i = 0; i < len; i++) {
      let stockResult;
      const dirName = dirs[i];
      try {
      stockResult = await this.getAllInfoForls(dirName)
      } catch (e) {
        process.stdout.write(e + '\n')
      }
        process.stdout.write(dirName + ':' + '\n')
        await this.loopShowFilesAndDirectories(stockResult)
      if(!(i === (len - 1) ))
        process.stdout.write('\n')
      process.chdir(curr) // GO BACK TO THE ROOT WHERE EVERYTHING STARTED

    }
  }


  async lsOutput(){
    let args = process.argv.slice(2)
    try{
      if(args.length <= 0){ /// if no argument, then print current directory
        let stockRes = await this.getAllInfoForls()
        let files = await this.utils.sortFilesAndDirs(stockRes)
          let data = [...files.up, ...files.low]
          await this.noFlagLs([...files.up, ...files.low])
          process.stdout.write('\n')
      }
      else if(args.length === 1){
        // console.log("THIS US HERE")
        try{
          let directoryName = args[0]
          // console.log( directoryName)
          await this.handlePath('lmao')
        }catch(err){
          // console.log(err)
          process.stdout.write(err)
        }
      }
      else{
        await this.argvHandler.showDirectoryErrors() // show errors
        await this.lsAllFilesAndDirectories()// this does show everything
        
      } // else
    }catch(error){
      process.stdout.write("THE ERROR NO FLAGWITH DIRECTORIES: " + error + "\n")
    }

  }


  async  lsPrettier() {
    let name = 'name'  
    let type = 'type' 
    let size = 'size'  
    let created = 'created'
    let stockRes;

    let args = process.argv.slice(2)
      try {
        await this.lsOutput()
      } catch (e) {
        process.stdout.write("LAST E : " + e)
      }

  }
}

let LS = new Main()
LS.lsPrettier()