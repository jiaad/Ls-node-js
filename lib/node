#!/usr/bin/env node
const fs = require('fs');
const colors = require('colors');
const util = require('util');
const process = require('process');
const { throws } = require('assert');    
const Utils = require('./Utils')
const ArgvHandler = require('./ArgvHandler');
const { argv } = require('process');
// * PROMISIFY callbacks
const readFile = util.promisify(fs.readFile);
const openFile = util.promisify(fs.open)
const fstat = util.promisify(fs.fstat)
const Stats = util.promisify(fs.stat)
const fsAccess = util.promisify(fs.access)


class Ls extends ArgvHandler {

  constructor() {
    super()
    /**
     * this Class inherits from ARGVHANDLER AND UTILS
     */
  }

async  printErrorIfDirNotExists(path) {
  try {
  const dir = await fsAccess(path)
  } catch (e) {
      const dirPath = e.path
      throw dirPath + ': No such file or directory :`('
      // return dirPath + ': No such file or directory :`('
      // console.log(dirPath + ': No such file or directory :`(')
  }
}

async  getFileFD (name, isFile, fd, dirent){
    try {
        fd = dirent.name
        return await openFile(fd)
    } catch (e) {
      // console.log('ERROR IN CATCH BLOCK FT_LS : ', e)
      throw 'ERROR IN CATCH BLOCK: NO FILE OR DIRECTORY'
    }

}

async  getAllInfoForls(directoryName = '.') {
  let res = [];
  let fileDescriptor;
  // let directoryName = this.argvDirectory() !== undefined ? this.argvDirectory() : '.'
  let directory = directoryName !== '.' ?  `./${directoryName}` : '.'
  // await this.quiIfDirectoryDoesntExist(directoryName)
  let dir;
  try {
    dir = await fs.promises.opendir(directory) // OPEN THE DIR  
  } catch (e) {
    // throw `${e} doesn't exists :'(`
    // throw `Command: ${directory} doesn't exists`
    throw `Command: ${directory} doesn't exists`


  }
  try {
    if(directory !== '.'){
      process.chdir(directory);
    }
  } catch (e) {
    console.error(`chdir: ${e}`);
  }


  for await (const dirent of dir) {
    
    // determine if it's a file of directory
    const type = dirent.isFile() ? true : false
    const name =  dirent.name
    try {
      const fd = await this.getFileFD(name, type, fileDescriptor, dirent)
    } catch (error) {
      console.log(error)
    }
    const stats = await Stats(name) // to Get stats about FILE or DIR
    const toPush = this.pushStatsToArray(stats, type, name) // CREATE OBJECT FOR ARRAY
    res.push(toPush) // PUSH TO ARRAY
  } // FOR OF FINISH

  if (directory !== '.') {
    process.chdir('../')
  }
  // console.log(this.res)
  return res
}

async noFlagLs(stockRes){
  // let args = this.argvDirectories()
  let arr = new Array
  stockRes.forEach((item) => arr.push(item.name))
  arr.sort().map((item) => process.stdout.write(item + '  '))
  console.log('izizizizi')
  process.stdout.write(`\n`);
}

async loopShowFilesAndDirectories(stockResult){
  for (let i = 0; i < stockResult.length; i++) {
    const element = stockResult[i];
    const elSize = String(element.size)
    const name = element.type === 'directory' ? element.name.blue : element.name
    process.stdout.write(name + ' ')
  }
  process.stdout.write('\n\n')
}


//////////// MAKE A GLOBAL TRY
  async noFlagButWithDirectories(){
    let args = process.argv.slice(2)
    if(args.length <= 0){ /// if no argument, then print current directory
      try {
        await this.getAllInfoForls()
      } catch (e) {
        console.log(e, '****')
      }
    }
    else if(args.length === 1){
      try{
        let directoryName = args[0]
        let stockResult = await this.getAllInfoForls(directoryName)
        this.loopShowFilesAndDirectories(stockResult)
      }catch(err){
        console.log(err)
      }
    }
    else{
      try {
        await this.showDirectoryErrors()
        process.stdout.write('\n')
        let dirNames = await this.argvDirectories()
        for (let i = 0; i < dirNames.length; i++) {
          const directoryName = dirNames[i];
          let exists = await this.doesFileOrDirExists(directoryName)
          try {
            var stockResult = await this.getAllInfoForls(directoryName)
          } catch (e) {
            console.log(e)
          }
          if(exists == true){
            console.log(directoryName + ":")
            this.loopShowFilesAndDirectories(stockResult)
          }
        }

      } catch (e) {
        console.log(e, '°°°')
      }
      
  }
  }

  async  lsPrettier() {
    let name = 'name'  
    let type = 'type' 
    let size = 'size'  
    let created = 'created'
    let stockRes;

    let args = process.argv.slice(2)

    if(args.length <= 0){
      try {
        let stockRes = await this.getAllInfoForls()
        this.noFlagLs(stockRes)
      } catch (e) {
        console.log(`NOFLAGS : ERROR : ${e}`)
      }
    }else{
      try {
        this.noFlagButWithDirectories()
      } catch (e) {
        console.log('LAST E:', e)
        // throw 'THERE IS A PROBLEM'
      }
    }

  }

}

let lsExec = new Ls()
lsExec.lsPrettier()
